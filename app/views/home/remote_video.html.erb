<!DOCTYPE html>

<head>
  <title>Respoke - Video Calling Example</title>

  <!-- Respoke client library -->
  <script src="https://cdn.respoke.io/respoke.min.js"></script>

  <!-- jQuery, for this example -->
  <script src="https://code.jquery.com/jquery-1.11.0.min.js"></script>

  <!-- Some simple styles to make things perty -->
</head>

<body>
<h3 id="status">Not Connected</h3>
<div id="login">
  <button id="doLogin">Connect to Respoke</button>
</div>

<div>
  <button id="doCall">Call local</button>
  <button id="doHangUp">Hang Up</button>
</div>

<!-- The person you're calling -->
<h3>Local video</h3>
<div id="remoteVideoSource"></div>

<hr />

<!-- You -->
<h3>Remote video</h3>
<div id="localVideoSource"></div>

<script type="text/javascript">
    // App ID value from the dev portal. You can play
    // around with the supplied ID or replace it with
    // your own.
    var appid = '7350fe8d-a87c-4899-af2a-7780b2a78b29';
    var activeCall;

    // The ID that other users will identify you by (your username)
    var endpointId = "remote@gmail.com";

    // Create the client object using the App ID
    var client = respoke.createClient({
//        appId: "7350fe8d-a87c-4899-af2a-7780b2a78b29",
//        developmentMode: false
    });

    // "connect" event fired after successful connection to Respoke
    client.listen('connect', function(e) {
        console.log("Connected to Respoke: ", e);
    });

    // Connect to Respoke when the user clicks "connect"
    $("#doLogin").click(function() {
        console.log("<%= @respoke_token %>");

        $.ajax({
            method: "POST",
            url: "/get_respoke_token.json",
            data: {
                respoke: { endpointId: endpointId }
            },
            success: function(response) {
                var token = response.token;

                client.connect({
                    token: token
                });
            }
        });

    });

    // The options for our video call including constraints and callbacks
    var callOptions = {
        constraints: {audio: true, video: true},

        // Your video
        onLocalMedia: function(evt) {
            setVideo('localVideoSource', evt.element)
        },

        // Their video
        onConnect: function(evt) {
            setVideo('remoteVideoSource', evt.element)
        }
    };

    // Listen for incoming calls
    client.listen('call', function(evt) {
        console.log('call: ', evt.call);
        activeCall = evt.call;

        // We only want to answer if we didn't initiate the call
        if(activeCall.caller !== true) {
            activeCall.answer(callOptions);

            // The hangup event indicates the call is over
            activeCall.listen('hangup', function () {
                hangUp();
            });
        }
    });

    // Call the recipient
    $("#doCall").click(function() {
//        TODO: change here
        var recipientId = 'local@gmail.com';
        var recipientEndpoint = client.getEndpoint({ id: recipientId });
        activeCall = recipientEndpoint.startVideoCall(callOptions);
    });

    // Hangup the call
    $("#doHangUp").click(hangUp);

    // Adds the supplied video element as a child of the supplied element
    function setVideo(elementId, videoElement) {
        var videoParent = document.getElementById(elementId);
        videoParent.innerHTML = "";
        videoParent.appendChild(videoElement);
    }

    // End the current call and clean up the DOM
    function hangUp() {
        activeCall.hangup();
        activeCall = null;

        // Remove the video elements
        $("#localVideoSource").html("");
        $("#remoteVideoSource").html("");
    }
</script>
</body>

</html>
